{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue35;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18431;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-roman\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 API Rick and Morty\
\
Flujo de acciones;\
1. Cargar la API y que los objetos sean le\'eddos\
2. Lista desplegable (se leen las APIS y se puede hacer el filtrado)\
	\
3. Seleccionar personaje y darle submit \
	AddEventListener \'97> ingresar la informaci\'f3n del personaje\
	const p\'e1rrafo = document.querySelector(\'91ID o tag -p/button-\'92)\
\
	\'97> variable 
\i let contador = 0; 
\i0 \
	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx7778\pardirnatural\partightenfactor0
\cf0 	boton.addEventListener(\'93click\'94, (parametros) => \{\
	\
	\});\
\
	Event Change al salir del input hace un vento  input.form-control\
	\
	input.addEventListener (\'93change\'94, (e) => \{\
	parrafo.textContent = e.target.value;\
	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	\
4. Mostrar la card\
4.1 Cleanview \
5. Elegir un nuevo personaje \
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f1\fs32 \cf2 \cb3 {\listtext	1.	}\expnd0\expndtw0\kerning0
\'bfCu\'e1l lenguaje y que tipos de diagramas se utilizan para dise\'f1ar clases? Lenguaje UML (Lenguaje Unificado de Modelado), los diagramas que se utilizan para dise\'f1ar clases son los diagramas siguientes:\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	i.	}\expnd0\expndtw0\kerning0
Diagrama de clases\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	ii.	}\expnd0\expndtw0\kerning0
Diagrama de objetos\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Haga una parafrasis de la definici\'f3n de una clase, objeto o instancia, atributo, metodo. Incluir un ejemplo.\cb1 \uc0\u8232 
\f2\fs27\fsmilli13600 \cb3  * Una clase es una agrupacion de elementos de diversos tipos en un lenguaje de programacion, permite mantener un estandar de desarrollo en un proyecto entero gracias a la monotonia e iteracion de creacion de estos elementos (me refiero a los metodos).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
 	<script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
 		class Videogame\{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
 			constructor(param1,param2)\{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
 				this.param1 = param1;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
 				this.param2 = param2;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
 			\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
 			//methods\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11.	}\expnd0\expndtw0\kerning0
 	</script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12.	}\expnd0\expndtw0\kerning0
 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13.	}\expnd0\expndtw0\kerning0
 * Un objeto es un elemento que almacena una collecion de valores, estos puedes ser de distintos tipos y pueden cambiar dinamicamente, los objetos pueden ser de distintos tipos, pueden ser *literales*, o creados a partir de la clase *Object*), los objetos tienen 2 principales componentes internos, los atributos *keys* y los valores *values*.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14.	}\expnd0\expndtw0\kerning0
 	<script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	15.	}\expnd0\expndtw0\kerning0
 		//ejemplo de objeto literal\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	16.	}\expnd0\expndtw0\kerning0
 		const myObj = \{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	17.	}\expnd0\expndtw0\kerning0
 			property:value,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	18.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	19.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	20.	}\expnd0\expndtw0\kerning0
 		//ejemplo de objeto instanciado\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	21.	}\expnd0\expndtw0\kerning0
 		const myObj = new Object();\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	22.	}\expnd0\expndtw0\kerning0
 		myObj.name = "Alex";\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	23.	}\expnd0\expndtw0\kerning0
 	</script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	24.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	25.	}\expnd0\expndtw0\kerning0
 * Una *instancia* es la creacion de un nuevo elemento a partir de una clase padre.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	26.	}\expnd0\expndtw0\kerning0
 	<script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	27.	}\expnd0\expndtw0\kerning0
 		//ejemplo de objeto literal\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	28.	}\expnd0\expndtw0\kerning0
 		const myObj = \{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	29.	}\expnd0\expndtw0\kerning0
 			property:value,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	30.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	31.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	32.	}\expnd0\expndtw0\kerning0
 		//ejemplo de objeto instanciado\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	33.	}\expnd0\expndtw0\kerning0
 		const myObj = new Object();\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	34.	}\expnd0\expndtw0\kerning0
 		myObj.name = "Alex";\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	35.	}\expnd0\expndtw0\kerning0
 	</script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	36.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	37.	}\expnd0\expndtw0\kerning0
 * Un atributo es una propiedad adjudicada a una entidad, en este caso un *objeto*, cuyo valor puede cambiar dinamicamente.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	38.	}\expnd0\expndtw0\kerning0
 	<script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	39.	}\expnd0\expndtw0\kerning0
 		//ejemplo de objeto literal\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	40.	}\expnd0\expndtw0\kerning0
 		const myObj = \{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	41.	}\expnd0\expndtw0\kerning0
 			property:value,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	42.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	43.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	44.	}\expnd0\expndtw0\kerning0
 		//ejemplo de objeto instanciado\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	45.	}\expnd0\expndtw0\kerning0
 		const myObj = new Object();\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	46.	}\expnd0\expndtw0\kerning0
 		myObj.name = "Alex";\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	47.	}\expnd0\expndtw0\kerning0
 	</script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	48.	}\expnd0\expndtw0\kerning0
  \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	49.	}\expnd0\expndtw0\kerning0
 * Un metodo es una funcion anidada en una clase, puede ser accedida por medio de una instancia a la clase en donde se aloja, *su acceso va a depender del tipo de metodo*, ademas de que estas funciones pueden recibir parametros y retornar valores o no.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	50.	}\expnd0\expndtw0\kerning0
 		<script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	51.	}\expnd0\expndtw0\kerning0
 			class Videogame\{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	52.	}\expnd0\expndtw0\kerning0
 				constructor(param1,param2)\{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	53.	}\expnd0\expndtw0\kerning0
 					this.param1 = param1;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	54.	}\expnd0\expndtw0\kerning0
 					this.param2 = param2;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	55.	}\expnd0\expndtw0\kerning0
 				\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	56.	}\expnd0\expndtw0\kerning0
 				getName()\{//este es el metodo que obtiene el nombre pasado como parametro\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	57.	}\expnd0\expndtw0\kerning0
 					console.log(this.param1);\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	58.	}\expnd0\expndtw0\kerning0
 				\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	59.	}\expnd0\expndtw0\kerning0
 			\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	60.	}\expnd0\expndtw0\kerning0
 		</script>\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls1\ilvl0\cf2 \cb1 \kerning1\expnd0\expndtw0 {\listtext	61.	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1\fs32 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	62.	}\expnd0\expndtw0\kerning0
Codificar con la sintaxis que desee una herencia de 3 clases (1 padre y dos hijas).\cb1 \uc0\u8232 
\f2\fs27\fsmilli13600 \cb3  Ver archivos ./runner.html ./class.js\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls1\ilvl0\cf2 \cb1 \kerning1\expnd0\expndtw0 {\listtext	63.	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1\fs32 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	64.	}\expnd0\expndtw0\kerning0
Explicar la diferencia entre prototipos y clases.\cb1 \uc0\u8232 
\f2\fs27\fsmilli13600 \cb3  La sentencia *prototype* en Javascript refiere a una propiedad que todos los objetos en el lenguaje tienen, esta ayudaba a crear metodos y clases en la sintaxis anterior a ECMAScript, a partir de esto, se a\'f1adio la *sugar sintax* para hacer mas facil la creacion de clases y objetos, un ejemplo de hacer 1 sola cosa con 2 formas distintas es:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	65.	}\expnd0\expndtw0\kerning0
 <script>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	66.	}\expnd0\expndtw0\kerning0
 		class Videogame\{//sugar syntax\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	67.	}\expnd0\expndtw0\kerning0
 			constructor(param1,param2)\{\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	68.	}\expnd0\expndtw0\kerning0
 				this.param1 = param1;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	69.	}\expnd0\expndtw0\kerning0
 				this.param2 = param2;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	70.	}\expnd0\expndtw0\kerning0
 			\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	71.	}\expnd0\expndtw0\kerning0
 			getName()\{//este es el metodo que obtiene el nombre pasado como parametro\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	72.	}\expnd0\expndtw0\kerning0
 				console.log(this.param1);\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	73.	}\expnd0\expndtw0\kerning0
 			\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	74.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	75.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	76.	}\expnd0\expndtw0\kerning0
 		function Videogame(param1,param2)\{//tradicional\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	77.	}\expnd0\expndtw0\kerning0
 			this.param1 = param1;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	78.	}\expnd0\expndtw0\kerning0
 			this.param2 = param2;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	79.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	80.	}\expnd0\expndtw0\kerning0
 		Videogame.prototype.getName = function()\{//metodo con prototype\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	81.	}\expnd0\expndtw0\kerning0
 				console.log(this.param1);\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	82.	}\expnd0\expndtw0\kerning0
 		\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	83.	}\expnd0\expndtw0\kerning0
 </script>\cb1 \uc0\u8232 
\f1\fs32 \uc0\u8232 \
}